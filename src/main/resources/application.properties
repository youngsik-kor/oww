# ========================================
# 서버 설정
# ========================================
server.port=8202

# 애플리케이션 이름
spring.application.name=login-service

# ========================================
# 데이터베이스 설정
# ========================================
spring.datasource.url=jdbc:oracle:thin:@//localhost:1521/XEPDB1
spring.datasource.username=oww2
spring.datasource.password=oww2
spring.datasource.driver-class-name=oracle.jdbc.OracleDriver

# JPA 설정
spring.jpa.hibernate.ddl-auto=none
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.Oracle12cDialect
spring.jpa.database-platform=org.hibernate.dialect.Oracle12cDialect

# ========================================
# Eureka 클라이언트 설정 - 호스트명 문제 해결
# ========================================
eureka.client.service-url.defaultZone=http://localhost:8200/eureka/
eureka.client.fetch-registry=true
eureka.client.register-with-eureka=true

# 중요: 호스트명을 localhost로 강제 설정
eureka.instance.hostname=localhost
eureka.instance.prefer-ip-address=false

# Login Service 자체 URL을 localhost로 설정
eureka.instance.home-page-url=http://localhost:8202/
eureka.instance.status-page-url=http://localhost:8202/actuator/info
eureka.instance.health-check-url=http://localhost:8202/actuator/health

# ========================================
# JWT 설정
# ========================================
jwt.secret=myBankingSecretKey123456789012345678901234567890
jwt.expiration=900000 
jwt.refresh-expiration=1209600000

# ========================================
# Google OAuth2 설정 - Gateway를 통한 접근으로 수정
# ========================================
spring.security.oauth2.client.registration.google.client-id=
spring.security.oauth2.client.registration.google.client-secret=
spring.security.oauth2.client.registration.google.scope=profile,email
# 중요: Gateway 포트로 수정 (8201)
spring.security.oauth2.client.registration.google.redirect-uri=http://localhost:8201/login/oauth2/code/google

spring.security.oauth2.client.provider.google.authorization-uri=https://accounts.google.com/o/oauth2/auth
spring.security.oauth2.client.provider.google.token-uri=https://oauth2.googleapis.com/token
spring.security.oauth2.client.provider.google.user-info-uri=https://www.googleapis.com/oauth2/v2/userinfo
spring.security.oauth2.client.provider.google.user-name-attribute=id

# ========================================
# GitHub OAuth2 설정
# ========================================
spring.security.oauth2.client.registration.github.client-id=Ov23li1ey1LejXeMd1Sn
spring.security.oauth2.client.registration.github.client-secret=3aeae8011e31ce1ca56f79db5ce2677ee947cb25
spring.security.oauth2.client.registration.github.scope=user:email
# 중요: Gateway 포트로 수정 (8201)
spring.security.oauth2.client.registration.github.redirect-uri=http://localhost:8201/login/oauth2/code/github

spring.security.oauth2.client.provider.github.authorization-uri=https://github.com/login/oauth/authorize
spring.security.oauth2.client.provider.github.token-uri=https://github.com/login/oauth/access_token
spring.security.oauth2.client.provider.github.user-info-uri=https://api.github.com/user
spring.security.oauth2.client.provider.github.user-name-attribute=id

# ========================================
# OAuth2 성공 후 리다이렉트 설정
# ========================================
app.oauth2.redirect-uri=http://localhost:8201/?login=success

# ========================================
# 디버깅 로그 설정
# ========================================
logging.level.com.oww.login=DEBUG
logging.level.org.springframework.security=DEBUG
logging.level.org.springframework.security.oauth2=DEBUG
logging.level.org.springframework.web=DEBUG
logging.level.org.hibernate.SQL=DEBUG
logging.level.com.netflix.eureka=DEBUG
logging.level.com.netflix.discovery=DEBUG

# ========================================
# Actuator 설정
# ========================================
management.endpoints.web.exposure.include=health,info
management.endpoint.health.show-details=always